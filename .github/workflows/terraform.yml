name: Terraform Deployment - Full Infrastructure

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - stg
          - prod

env:
  TF_VERSION: 1.7.4

jobs:
  deploy:
    name: 'Deploy (${{ inputs.environment }})'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ inputs.environment == 'prod' && 'us-west-2' || 'us-east-2' }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform-version: ${{ env.TF_VERSION }}
        terraform-workspace: ${{ inputs.environment }}

    - name: Terraform Init with Retry
      run: |
        # Configurar backend dinámico por ambiente
        cat > backend.tf <<EOF
        terraform {
          backend "s3" {
            bucket         = "finaktiva-tfstate-${{ inputs.environment }}"
            key            = "terraform.tfstate"
            region         = "${{ inputs.environment == 'prod' && 'us-west-2' || 'us-east-2' }}"
            dynamodb_table = "terraform-state-lock"
            encrypt        = true
          }
        }
        EOF
        
        # Inicialización con reintentos para S3 eventual consistency
        for i in {1..3}; do
          terraform init -input=false && break || sleep 15
        done

    - name: Terraform Validate
      run: terraform validate -no-color

    - name: Terraform Plan (Detailed)
      if: ${{ inputs.action == 'plan' || inputs.action == 'apply' }}
      run: |
        terraform plan -input=false -no-color -out=tfplan -detailed-exitcode
        
        # Generar reporte detallado
        terraform show -no-color tfplan > tfplan.txt
        echo "=== RESOURCE COUNT ==="
        grep -E "^(  \+|  ~|  -)" tfplan.txt | awk '{print $2}' | sort | uniq -c | sort -nr
        
        echo "=== PLAN SUMMARY ==="
        grep -E "Plan:" tfplan.txt || echo "No changes detected"

    - name: Upload Terraform Plan
      if: ${{ inputs.action == 'plan' && github.event_name == 'pull_request' }}
      uses: actions/upload-artifact@v3
      with:
        name: tfplan-${{ inputs.environment }}
        path: tfplan.txt

    - name: Terraform Apply
      if: ${{ inputs.action == 'apply' && github.ref == 'refs/heads/main' }}
      run: |
        # Aplicar con timeout extendido para muchos recursos
        timeout 1800 terraform apply -input=false -no-color -auto-approve tfplan
        
        # Mostrar outputs importantes
        echo "=== IMPORTANT OUTPUTS ==="
        terraform output -no-color | grep -E "(vpc_id|subnets|alb_dns|cluster_name)"

    - name: Terraform Destroy
      if: ${{ inputs.action == 'destroy' && github.ref == 'refs/heads/main' }}
      run: |
        echo "WARNING: Destroying all resources!"
        terraform destroy -input=false -no-color -auto-approve