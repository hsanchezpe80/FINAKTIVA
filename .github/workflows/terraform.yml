name: "Terraform CI/CD Pipeline"

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Entorno a desplegar (dev/prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
      action:
        description: 'Acci√≥n a ejecutar'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: List Repository Contents
        run: |
          echo "Contenido en la ra√≠z del repositorio:"
          ls -la
          echo "-----------------------"
          echo "Contenido en terraform-iac:"
          ls -la terraform-iac || echo "No existe el directorio terraform-iac"
          echo "-----------------------"
          echo "Contenido en terraform-iac/ambientes:"
          ls -la terraform-iac/ambientes || echo "No existe el directorio terraform-iac/ambientes"
          echo "-----------------------"
          echo "Contenido en terraform-iac/ambientes/dev:"
          ls -la terraform-iac/ambientes/dev || echo "No existe el directorio terraform-iac/ambientes/dev"
          echo "-----------------------"
          echo "Buscando todos los archivos .tfvars en el repositorio:"
          find . -name "*.tfvars"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
          terraform_wrapper: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Create temporary tfvars file
        run: |
          mkdir -p terraform-iac/ambientes/dev
          cat > terraform-iac/ambientes/dev/terraform.tfvars << EOF
          # Variables para el entorno dev
          aws_region = "us-east-2"
          environment = "dev"
          # A√±ade aqu√≠ m√°s variables seg√∫n sea necesario
          EOF
          echo "Contenido del archivo creado:"
          cat terraform-iac/ambientes/dev/terraform.tfvars

      # Ejecutamos comandos desde la ra√≠z pero usando rutas absolutas
      - name: Terraform Init
        id: init
        run: |
          cd terraform-iac && terraform init \
            -backend-config="bucket=finaktiva-terraform-state-dev" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="region=us-east-2" \
            -backend-config="dynamodb_table=terraform-state-lock"

      - name: Terraform Format
        id: fmt
        run: cd terraform-iac && terraform fmt -check
        continue-on-error: true

      - name: Terraform Validate
        id: validate
        run: cd terraform-iac && terraform validate

      # Usamos ruta absoluta con el directorio actual
      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request' || github.event.inputs.action == 'plan' || github.event.inputs.action == 'apply'
        run: |
          cd terraform-iac
          echo "Directorio actual: $(pwd)"
          echo "Verificando archivo de variables:"
          ls -la ambientes/dev/terraform.tfvars || echo "Archivo no encontrado"
          terraform plan -var-file="$(pwd)/ambientes/dev/terraform.tfvars" -out=tfplan

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Mostrar Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Ejecutado por: @${{ github.actor }}, Acci√≥n: \`${{ github.event_name }}\`*`;
              
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Apply
        if: github.event.inputs.action == 'apply' && github.event_name == 'workflow_dispatch'
        run: |
          cd terraform-iac
          terraform apply -auto-approve tfplan

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy' && github.event_name == 'workflow_dispatch'
        run: |
          cd terraform-iac
          terraform destroy -var-file="$(pwd)/ambientes/${{ github.event.inputs.environment }}/terraform.tfvars" -auto-approve