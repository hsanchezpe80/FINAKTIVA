name: "Terraform CI/CD Pipeline"

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Entorno a desplegar (dev/prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
      action:
        description: 'Acción a ejecutar'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Check Repository Structure
        run: |
          echo "Listing repository root:"
          ls -la
          echo "Checking if ambientes/dev directory exists:"
          if [ ! -d "ambientes/dev" ]; then
            echo "Directory does not exist, creating it"
            mkdir -p ambientes/dev
          else
            echo "Directory exists"
            ls -la ambientes/dev
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
          terraform_wrapper: false

      # Configura las credenciales de AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2  # Cambia a tu región

      # Verifica que las credenciales AWS estén funcionando
      - name: Verify AWS credentials
        run: aws sts get-caller-identity

      # Crea el archivo de variables si no existe - sintaxis corregida
      - name: Ensure terraform.tfvars exists
        run: |
          if [ ! -f "ambientes/dev/terraform.tfvars" ]; then
            echo "Creating default terraform.tfvars file"
            echo '# Variables para el entorno dev' > ambientes/dev/terraform.tfvars
            echo 'aws_region = "us-east-2"' >> ambientes/dev/terraform.tfvars
            echo 'environment = "dev"' >> ambientes/dev/terraform.tfvars
            echo '# Añade aquí más variables según sea necesario' >> ambientes/dev/terraform.tfvars
          fi

      - name: Terraform Init
        id: init
        run: |
          terraform init \
            -backend-config="bucket=finaktiva-terraform-state-dev" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="region=us-east-2" \
            -backend-config="dynamodb_table=terraform-state-lock"

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request' || github.event.inputs.action == 'plan' || github.event.inputs.action == 'apply'
        run: terraform plan -var-file=ambientes/dev/terraform.tfvars -out=tfplan
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
            
            <details><summary>Mostrar Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Ejecutado por: @${{ github.actor }}, Acción: \`${{ github.event_name }}\`*`;
              
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Apply
        if: github.event.inputs.action == 'apply' && github.event_name == 'workflow_dispatch'
        run: terraform apply -var-file=ambientes/${{ github.event.inputs.environment }}/terraform.tfvars -auto-approve tfplan

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy' && github.event_name == 'workflow_dispatch'
        run: terraform destroy -var-file=ambientes/${{ github.event.inputs.environment }}/terraform.tfvars -auto-approve