name: Terraform Pipeline Modular

on:
  push:
    branches: [ main, master ]
    paths:
      - 'terraform-iac/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'terraform-iac/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Ambiente a desplegar (dev/stg/prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - stg
          - prod
      module:
        description: 'Módulo específico a desplegar (opcional)'
        required: false
        type: choice
        options:
          - ''
          - alb
          - ecr
          - ecs
          - networking
          - security

env:
  TF_LOG: INFO
  AWS_REGION: us-east-1

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: './terraform-iac'

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check -recursive
      continue-on-error: true

    - name: Terraform Init for Specific Module and Environment
      id: init
      run: |
        ENVIRONMENT=${{ github.event.inputs.environment || 'dev' }}
        MODULE=${{ github.event.inputs.module }}
        
        if [ -z "$MODULE" ]; then
          echo "No se especificó módulo, inicialializando el ambiente completo"
          cd ambientes/$ENVIRONMENT
          terraform init
        else
          echo "Inicializando módulo $MODULE para ambiente $ENVIRONMENT"
          cd modulos/$MODULE
          terraform init -backend-config="../../ambientes/$ENVIRONMENT/backend.tfvars"
        fi

    - name: Terraform Validate
      id: validate
      run: |
        ENVIRONMENT=${{ github.event.inputs.environment || 'dev' }}
        MODULE=${{ github.event.inputs.module }}
        
        if [ -z "$MODULE" ]; then
          cd ambientes/$ENVIRONMENT
          terraform validate
        else
          cd modulos/$MODULE
          terraform validate
        fi

    - name: Terraform Plan
      id: plan
      run: |
        ENVIRONMENT=${{ github.event.inputs.environment || 'dev' }}
        MODULE=${{ github.event.inputs.module }}
        
        if [ -z "$MODULE" ]; then
          cd ambientes/$ENVIRONMENT
          terraform plan -var-file="terraform.tfvars" -out=tfplan
        else
          cd modulos/$MODULE
          terraform plan -var-file="../../ambientes/$ENVIRONMENT/terraform.tfvars" -out=tfplan
        fi
      continue-on-error: true

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      id: apply
      if: github.event_name != 'pull_request'
      run: |
        ENVIRONMENT=${{ github.event.inputs.environment || 'dev' }}
        MODULE=${{ github.event.inputs.module }}
        
        if [ -z "$MODULE" ]; then
          cd ambientes/$ENVIRONMENT
          terraform apply -auto-approve tfplan
        else
          cd modulos/$MODULE
          terraform apply -auto-approve tfplan
        fi

####3