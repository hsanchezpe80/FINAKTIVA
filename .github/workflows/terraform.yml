name: Terraform Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Ambiente (dev, stg, prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - stg
          - prod
      action:
        description: 'Acción de Terraform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.7.4  # Versión actual estable al momento de escribir esto

jobs:
  deploy:
    name: Terraform Deployment
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform-version: ${{ env.TF_VERSION }}
        terraform-workspace: default

    - name: Terraform Init
      id: init
      run: |
        # Configurar backend dinámicamente
        cat > backend.tf <<EOF
        terraform {
          backend "s3" {
            bucket         = "finaktiva-tfstate-${{ inputs.environment || 'dev' }}"
            key            = "terraform.tfstate"
            region         = "${{ env.AWS_REGION }}"
            dynamodb_table = "terraform-locks"
            encrypt        = true
          }
        }
        EOF
        
        # Inicializar con reintentos para manejar eventual consistency de S3
        for i in {1..3}; do
          terraform init -input=false && break || sleep 10
        done

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      if: ${{ inputs.action == 'plan' || inputs.action == 'apply' }}
      run: |
        terraform plan -input=false -out=tfplan
        terraform show -no-color tfplan > tfplan.txt
        
        # Mostrar resumen del plan
        echo "=== PLAN SUMMARY ==="
        grep -E "Plan:|No changes." tfplan.txt

    - name: Terraform Apply
      if: ${{ inputs.action == 'apply' && github.ref == 'refs/heads/main' }}
      run: terraform apply -input=false -auto-approve tfplan

    - name: Terraform Destroy
      if: ${{ inputs.action == 'destroy' && github.ref == 'refs/heads/main' }}
      run: |
        terraform destroy -input=false -auto-approve
        echo "WARNING: Infrastructure destroyed!"

    - name: Upload Terraform Plan
      if: ${{ inputs.action == 'plan' && github.event_name == 'pull_request' }}
      uses: actions/upload-artifact@v3
      with:
        name: tfplan
        path: tfplan.txt