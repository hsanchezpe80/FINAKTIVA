name: "Terraform CI/CD Pipeline"

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Entorno a desplegar (dev/prod/stg)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
          - stg
      action:
        description: 'Acción a ejecutar'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Super Detailed Repository Debug
        run: |
          echo "==== ESTRUCTURA COMPLETA DEL REPOSITORIO ===="
          find . -type f | grep -v ".git" | sort
          
          echo -e "\n==== CONTENIDO DE LA CARPETA TERRAFORM-IAC ===="
          ls -la ./terraform-iac || echo "Directorio terraform-iac no encontrado"
          
          echo -e "\n==== CONTENIDO DE LA CARPETA AMBIENTES ===="
          ls -la ./terraform-iac/ambientes || echo "Directorio ambientes no encontrado"
          
          echo -e "\n==== CONTENIDO DE LA CARPETA DEV ===="
          ls -la ./terraform-iac/ambientes/dev || echo "Directorio dev no encontrado"
          
          echo -e "\n==== BUSCAR TODOS LOS ARCHIVOS TERRAFORM.TFVARS ===="
          find . -name "terraform.tfvars"
          
          echo -e "\n==== INFORMACIÓN DEL SISTEMA DE ARCHIVOS ===="
          df -h
          
          echo -e "\n==== PERMISOS DE USUARIO ===="
          whoami
          id

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
          terraform_wrapper: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      # Crear un archivo tfvars de respaldo en caso de que el original no exista
      - name: Create Backup tfvars File
        run: |
          mkdir -p terraform-iac/ambientes/dev
          echo "==== CREANDO ARCHIVO TERRAFORM.TFVARS DE RESPALDO ===="
          cat > terraform-iac/ambientes/dev/terraform.tfvars.backup << EOF
          # Variables para el entorno dev
          aws_region = "us-east-2"
          environment = "dev"
          
          # Variables de red
          vpc_cidr = "10.0.0.0/16"
          public_subnets_cidr = ["10.0.1.0/24", "10.0.2.0/24"]
          private_subnets_cidr = ["10.0.3.0/24", "10.0.4.0/24"]
          isolated_subnets_cidr = ["10.0.5.0/24", "10.0.6.0/24"]
          availability_zones = ["us-east-2a", "us-east-2b"]
          
          # Variables del proyecto
          project_name = "finaktiva"
          EOF
          
          echo "Contenido del archivo de respaldo creado:"
          cat terraform-iac/ambientes/dev/terraform.tfvars.backup
          
          echo -e "\n==== VERIFICANDO ARCHIVOS EN CARPETA DEV DESPUÉS DE CREAR BACKUP ===="
          ls -la terraform-iac/ambientes/dev/

      - name: Try Using Original or Backup File
        id: varfile
        run: |
          cd terraform-iac
          if [ -f "ambientes/dev/terraform.tfvars" ]; then
            echo "VAR_FILE=ambientes/dev/terraform.tfvars" >> $GITHUB_OUTPUT
            echo "Usando archivo original: ambientes/dev/terraform.tfvars"
          else
            echo "Archivo original no encontrado, usando backup"
            cp ambientes/dev/terraform.tfvars.backup ambientes/dev/terraform.tfvars
            echo "VAR_FILE=ambientes/dev/terraform.tfvars" >> $GITHUB_OUTPUT
          fi

      # Inicializar Terraform
      - name: Terraform Init
        id: init
        run: |
          cd terraform-iac
          terraform init \
            -backend-config="bucket=finaktiva-terraform-state-dev" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="region=us-east-2" \
            -backend-config="dynamodb_table=terraform-state-lock"

      # Formatear código Terraform
      - name: Terraform Format
        id: fmt
        run: cd terraform-iac && terraform fmt -check -recursive
        continue-on-error: true

      # Validar configuración de Terraform
      - name: Terraform Validate
        id: validate
        run: cd terraform-iac && terraform validate

      # Plan de Terraform usando el archivo identificado
      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request' || github.event.inputs.action == 'plan' || github.event.inputs.action == 'apply'
        run: |
          cd terraform-iac
          ENV="${{ github.event.inputs.environment || 'dev' }}"
          echo "Utilizando ambiente: $ENV"
          echo "Verificando existencia del archivo de variables:"
          ls -la ambientes/$ENV/terraform.tfvars || echo "Archivo no encontrado"
          
          echo "Ejecutando terraform plan con archivo: ${{ steps.varfile.outputs.VAR_FILE }}"
          terraform plan -var-file="${{ steps.varfile.outputs.VAR_FILE }}" -out=tfplan || terraform plan -var-file="ambientes/$ENV/terraform.tfvars.backup" -out=tfplan

      # El resto del workflow permanece igual...
      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
            
            <details><summary>Mostrar Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Ejecutado por: @${{ github.actor }}, Acción: \`${{ github.event_name }}\`*`;
              
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Apply
        if: github.event.inputs.action == 'apply' && github.event_name == 'workflow_dispatch'
        run: |
          cd terraform-iac
          terraform apply -auto-approve tfplan

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy' && github.event_name == 'workflow_dispatch'
        run: |
          cd terraform-iac
          ENV="${{ github.event.inputs.environment }}"
          terraform destroy -var-file="${{ steps.varfile.outputs.VAR_FILE }}" -auto-approve || terraform destroy -var-file="ambientes/$ENV/terraform.tfvars.backup" -auto-approve