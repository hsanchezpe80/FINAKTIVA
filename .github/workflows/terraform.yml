name: Infraestructura y Despliegue

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Ambiente a desplegar (dev, stg, prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - stg
          - prod

jobs:
  deploy:
    name: Despliegue de Infraestructura
    runs-on: ubuntu-latest
    
    # Establecer el ambiente según el contexto
    env:
      # Por defecto usa 'dev' para develop branch, 'prod' para main, o el input manual
      ENV: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod') || (github.ref == 'refs/heads/develop' && 'dev') || 'dev' }}
      REGION_DEV: us-east-1
      REGION_PROD: us-west-2
      
    steps:
      - name: Checkout del código
        uses: actions/checkout@v3
      
      - name: Configurar AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.ENV == 'prod' && env.REGION_PROD || env.REGION_DEV }}
      
      - name: Obtener ID de cuenta AWS
        id: aws-account
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID" >> $GITHUB_ENV
          echo "Ambiente: ${{ env.ENV }}"
          echo "Región: ${{ env.ENV == 'prod' && env.REGION_PROD || env.REGION_DEV }}"
      
      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.6
      
      # PASO 1: Configurar buckets para Terraform state
      - name: Crear y configurar buckets para Terraform state
        run: |
          # Definir la región correcta según el ambiente
          REGION="${{ env.ENV == 'prod' && env.REGION_PROD || env.REGION_DEV }}"
          
          echo "=== Creando buckets para Terraform state ==="
          
          # Limpiar estados existentes si es necesario (ignorar errores)
          aws s3 rm s3://finaktiva-terraform-state-dev/terraform.tfstate --region ${{ env.REGION_DEV }} || true
          aws s3 rm s3://finaktiva-terraform-state-stg/terraform.tfstate --region ${{ env.REGION_DEV }} || true
          aws s3 rm s3://finaktiva-terraform-state-prod/terraform.tfstate --region ${{ env.REGION_PROD }} || true
          
          # Crear buckets (ignorar errores si ya existen)
          aws s3 mb s3://finaktiva-terraform-state-dev --region ${{ env.REGION_DEV }} || true
          aws s3 mb s3://finaktiva-terraform-state-stg --region ${{ env.REGION_DEV }} || true
          aws s3 mb s3://finaktiva-terraform-state-prod --region ${{ env.REGION_PROD }} || true
          
          # Habilitar versionado
          aws s3api put-bucket-versioning --bucket finaktiva-terraform-state-dev --versioning-configuration Status=Enabled
          aws s3api put-bucket-versioning --bucket finaktiva-terraform-state-stg --versioning-configuration Status=Enabled
          aws s3api put-bucket-versioning --bucket finaktiva-terraform-state-prod --versioning-configuration Status=Enabled
          
          # Crear tabla DynamoDB para lock (ignorar errores si ya existe)
          aws dynamodb create-table \
              --table-name terraform-state-lock \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 \
              --region $REGION || true
              
          echo "=== Configuración de Terraform state completada ==="
      
      # PASO 2: Crear repositorios ECR
      - name: Crear repositorios ECR
        run: |
          REGION="${{ env.ENV == 'prod' && env.REGION_PROD || env.REGION_DEV }}"
          
          echo "=== Creando repositorios ECR ==="
          
          # Crear repositorios con nombres que coincidan con el módulo Terraform
          aws ecr delete-repository --repository-name ${{ env.ENV }}-app1 --force || true
          aws ecr delete-repository --repository-name ${{ env.ENV }}-app2 --force || true
          
          aws ecr create-repository --repository-name ${{ env.ENV }}-app1 --region $REGION || true
          aws ecr create-repository --repository-name ${{ env.ENV }}-app2 --region $REGION || true
          
          echo "=== Repositorios ECR creados correctamente ==="
      
      # PASO 3: Autenticar, construir y publicar imágenes Docker a ECR
      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Autenticar en ECR
        id: ecr-login
        run: |
          REGION="${{ env.ENV == 'prod' && env.REGION_PROD || env.REGION_DEV }}"
          aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.$REGION.amazonaws.com
      
      - name: Construir y publicar imagen app1
        uses: docker/build-push-action@v4
        with:
          context: ./apps/app1
          push: true
          tags: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.ENV == 'prod' && env.REGION_PROD || env.REGION_DEV }}.amazonaws.com/${{ env.ENV }}-app1:latest
      
      - name: Construir y publicar imagen app2
        uses: docker/build-push-action@v4
        with:
          context: ./apps/app2
          push: true
          tags: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.ENV == 'prod' && env.REGION_PROD || env.REGION_DEV }}.amazonaws.com/${{ env.ENV }}-app2:latest
      
      # PASO 4: Ejecutar Terraform
      - name: Inicializar Terraform
        working-directory: ./terraform
        run: |
          REGION="${{ env.ENV == 'prod' && env.REGION_PROD || env.REGION_DEV }}"
          
          terraform init \
            -backend-config="bucket=finaktiva-terraform-state-${{ env.ENV }}" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="region=$REGION" \
            -backend-config="dynamodb_table=terraform-state-lock"
      
      - name: Plan de Terraform
        working-directory: ./terraform
        run: |
          REGION="${{ env.ENV == 'prod' && env.REGION_PROD || env.REGION_DEV }}"
          
          terraform plan \
            -var="environment=${{ env.ENV }}" \
            -var="region=$REGION" \
            -out=tfplan
      
      # Solo aplica en push a ramas principales o en dispatch manual, no en PRs
      - name: Aplicar Terraform
        if: github.event_name != 'pull_request'
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan
      
      - name: Notificar completado
        run: echo "Pipeline completado exitosamente para ambiente ${{ env.ENV }}"